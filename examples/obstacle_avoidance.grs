// ROS 2 package
package obstacle_avoidance{
	description = "This is an obstacle avoidance ROS 2 package."
	path = "path/to/pack1"
	license = "Apache License 2.0"
	maintainer = "bronzeRaf"
	email = "rnm1816@gmail.com"
	version = "Eloquent_Elusor"
	hasNodes = sonar, motor, controller
}

// Node Sonar
node sonar{
	hasPublishers = left_sonar_publisher, right_sonar_publisher
}

// Node Motor
node motor{
	hasSubscribers = motion_subscriber
}

// Node Motion Controller
node controller{
	hasPublishers = motion_publisher
	hasSubscribers = left_sonar_subscriber, right_sonar_subscriber
}

// Publisher for left sonar value
publisher left_sonar_publisher{
	topicPath = "sensors/range/left"
	publishRate = 0.2
	message = Range
}

// Publisher for right sonar value
publisher right_sonar_publisher{
	topicPath = "sensors/range/right"
	publishRate = 0.2
	message = Range
}

// Publisher for motion velocities
publisher motion_publisher{
	topicPath = "actuators/velocities"
	publishRate = 0.2
	message = Velocities
}

// Subscriber for left sonar value
subscriber left_sonar_subscriber{
	topicPath = "sensors/range/left"
	message = Range
}

// Subscriber for right sonar value
subscriber right_sonar_subscriber{
	topicPath = "sensors/range/right"
	message = Range
}

// Subscriber for motion velocities
subscriber motion_subscriber{
	topicPath = "actuators/velocities"
	message = Velocities
}

// Message Velocities (Used for motion to the motors)
message Velocities{
	description = "This is a Message to provide a timestamped motion value for left and right motor"
	rostype Header h, std_msgs, description = "Timestamp Header of the velocities"
	datatype float32 left_rpm, description = "velocity of the left motor"
	datatype float32 right_rpm, description = "velocity of the right motor"
}

// Define the Range message to use it
message Range package = "sensor_msgs"

// Host device
host robot{
	architecture = "x64"
	os = "Ubuntu_18"
	hardDisk = 20480
	memory = 2048
	rosVersion = "Eloquent_Elusor"
}

// Deployment configuration
deployment launch_robot{
	nodes = sonar, motor, controller
	host = robot
}

